[{"id":"fd7517fea6d57c4b","type":"tab","label":"Flow 1","disabled":false,"info":"","env":[]},{"id":"mqtt_input_soil","type":"mqtt in","z":"fd7517fea6d57c4b","name":"MQTT Sensor Data","topic":"waspmote/868LP/MESH001","qos":"0","datatype":"json","broker":"mqtt_broker","nl":false,"rap":true,"rh":0,"inputs":0,"x":770,"y":820,"wires":[["filter_soil1"]]},{"id":"filter_soil1","type":"function","z":"fd7517fea6d57c4b","name":"Filter soil1","func":"if (msg.payload.sensor === \"soil1\") {\n    msg.moisture = parseFloat(msg.payload.value);\n    return msg;\n}\nreturn null;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":970,"y":820,"wires":[["compare_threshold"]]},{"id":"compare_threshold","type":"function","z":"fd7517fea6d57c4b","name":"Compare Threshold","func":"\nconst rawMoisture = msg.moisture;\nconst moisture    = Number(rawMoisture);\n\nif (Number.isNaN(moisture)) {\n    node.error(`Incoming 'moisture' is invalid → \"${rawMoisture}\"`, msg);\n    return null;                            \n}\nnode.debug(`Incoming moisture = ${moisture}`);\n\nconst ENTITY_ID   = 'input_number.plant_1_moisture_threshold';\nconst haGlobal    = global.get('homeassistant');     \n\nif (!haGlobal || !haGlobal.homeAssistant || !haGlobal.homeAssistant.states) {\n    node.error('Home Assistant context not found; is “Expose…” enabled?', msg);\n    return null;\n}\n\nconst thresholdEnt = haGlobal.homeAssistant.states[ENTITY_ID];\n\nif (!thresholdEnt) {\n    node.error(`Entity ${ENTITY_ID} not present in HA state bag`, msg);\n    return null;\n}\n\nconst rawThreshold = thresholdEnt.state;\nconst threshold    = Number(rawThreshold);\n\nif (Number.isNaN(threshold)) {\n    node.error(`Threshold value for ${ENTITY_ID} is invalid → \"${rawThreshold}\"`, msg);\n    return null;\n}\n\nnode.debug(`Fetched threshold = ${threshold}`);\n\n// Compare & decide watering\nnode.warn(`Moisture ${moisture} %  vs  Threshold ${threshold} %`);\n\nif (moisture < threshold) {\n    node.warn(`Needs watering → moisture ${moisture}% < ${threshold}%`);\n\n    msg.payload = {\n        action : 'water',\n        plant  : 1,\n        value  : moisture\n    };\n    return msg;                              \n}\n\nnode.debug('No watering needed (moisture above threshold)');\nreturn null;                                   ","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1230,"y":820,"wires":[["mqtt_command"]]},{"id":"mqtt_command","type":"mqtt out","z":"fd7517fea6d57c4b","name":"Send Water Command","topic":"plant/actuator/command","qos":"0","retain":"false","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"mqtt_broker","x":1520,"y":820,"wires":[]},{"id":"mqtt_broker","type":"mqtt-broker","name":"Local MQTT","broker":"192.168.197.179","port":"1883","clientid":"","autoConnect":true,"usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"autoUnsubscribe":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"userProps":"","sessionExpiry":""}]
